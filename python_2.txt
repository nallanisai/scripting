Function Calls
===============

In the context of programming, a function is a named sequence of statements that performs
a computation. When you define a function, you specify the name and the sequence of
statements. Later, you can “call” the function by name. We have already seen one example
of a function call:
>>> type(32)
<type 'int'>

The name of the function is type. The expression in parentheses is called the argument of
the function. The result, for this function, is the type of the argument.
It is common to say that a function “takes” an argument and “returns” a result. The result
is called the return value.




Type conversion function:
==========================

Python provides built-in functions that convert values from one type to another. 

int:
=====
The int function takes any value and converts it to an integer, if it can, or complains otherwise:
>>> int('32')
32
>>> int('Hello')
ValueError: invalid literal for int(): Hello

Float:
=======
Float converts integers and strings into floating-point numbers.

>>> float(32)
32.0
>>> float('3.14159')
3.14159

String: str converts arguments into string.
=======

>>> str(32)
'32'
>>>
>>> str('32')
'32'
>>>
>>> str('3.1234')
'3.1234'
>>> str('3.14159')
'3.14159'
>>>



